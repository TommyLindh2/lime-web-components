(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{"./doc/concepts/commands.mdx":function(e,n,a){"use strict";a.r(n);var t=a("./node_modules/react/index.js"),m=a.n(t),o=a("./node_modules/@mdx-js/tag/dist/index.js");function c(e,n){if(null==e)return{};var a,t,m=function(e,n){if(null==e)return{};var a,t,m={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(m[a]=e[a]);return m}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(m[a]=e[a])}return m}n.default=function(e){var n=e.components;c(e,["components"]);return m.a.createElement(o.MDXTag,{name:"wrapper",components:n},m.a.createElement(o.MDXTag,{name:"h1",components:n,props:{id:"commands"}},"Commands"),m.a.createElement(o.MDXTag,{name:"p",components:n},"Commands are a great way to help capture user intent. They let us encapsulate all information needed to perform an\naction into an object, and later execute that action without knowing anything about the action beeing requested or the\nreceiver of the request."),m.a.createElement(o.MDXTag,{name:"p",components:n},"To help with this, the platform exposes a service called ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"commandbus"),"."),m.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"command-bus"}},"Command bus"),m.a.createElement(o.MDXTag,{name:"p",components:n},"The command bus uses the command design pattern and combines it with a service layer. Its job is to take a command\nobject (which describes what the user wants to do) and match it to a handler (which executes it). This can help you\nstructure your code in a neat way."),m.a.createElement(o.MDXTag,{name:"p",components:n},"We can for instance use it in a menu. The menu knows nothing about what actions to perform when the user selects an\nitem in the menu. It only takes command objects as input, and sends the commands to the command bus for execution when\nan item is selected."),m.a.createElement(o.MDXTag,{name:"h3",components:n,props:{id:"example"}},"Example"),m.a.createElement(o.MDXTag,{name:"p",components:n},"First we declare and register the command and its handler on the command bus"),m.a.createElement(o.MDXTag,{name:"pre",components:n},m.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-typescript",metaString:""}},"@Command({ id: 'my-special-command' })\nclass MySpecialCommand {\n    public id: number;\n    public limetype: Limetype;\n}\n\nclass MySpecialHandler implements CommandHandler {\n    public handle(command: MySpecialCommand) {\n        // do your magic stuff here\n    }\n}\n\nconst handler = new MySpecialHandler();\nconst commandBus = platform.get(PlatformServiceName.CommandBus);\ncommandbus.register(MySpecialCommand, handler);\n")),m.a.createElement(o.MDXTag,{name:"p",components:n},"Then, if we want to invoke the command, we simply create an instance of it and send it to the commandbus"),m.a.createElement(o.MDXTag,{name:"pre",components:n},m.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-typescript",metaString:""}},"const command = new MySpecialCommand();\ncommand.id = 1001;\ncommand.limetype = { ... };\n\ncommandbus.handle(command);\n")))}}}]);